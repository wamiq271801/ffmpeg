name: Build FFmpeg-Kit for Android

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ffmpeg-kit:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout for long builds
    
    strategy:
      matrix:
        # Build for all ABIs except arm64-v8a as requested
        abi: [armeabi-v7a, x86, x86_64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          wget \
          curl \
          git \
          cmake \
          ninja-build \
          pkg-config \
          autoconf \
          automake \
          libtool \
          make \
          yasm \
          nasm \
          python3 \
          python3-pip \
          unzip \
          zip \
          tar \
          gzip \
          bzip2 \
          xz-utils \
          file
          
    - name: Set up environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_ENV
        
    - name: Verify Android setup
      run: |
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Android NDK Root: $ANDROID_NDK_ROOT"
        ls -la $ANDROID_SDK_ROOT/
        ls -la $ANDROID_NDK_ROOT/
        
    - name: Clone FFmpeg-Kit repository
      run: |
        git clone https://github.com/arthenica/ffmpeg-kit.git
        cd ffmpeg-kit
        git submodule update --init --recursive
        
    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ffmpeg-kit/android/src/main/cpp/external-libraries
        key: ${{ runner.os }}-ffmpeg-kit-${{ hashFiles('ffmpeg-kit/android.sh') }}
        restore-keys: |
          ${{ runner.os }}-ffmpeg-kit-
          
    - name: Prepare build script with custom options
      run: |
        cd ffmpeg-kit
        
        # Create a custom build script with your specific disable options
        cat > custom_android_build.sh << 'EOF'
        #!/bin/bash
        
        # Set strict error handling
        set -e
        
        # Export required environment variables
        export ANDROID_SDK_ROOT="$ANDROID_SDK_ROOT"
        export ANDROID_NDK_ROOT="$ANDROID_NDK_ROOT"
        export ANDROID_HOME="$ANDROID_SDK_ROOT"
        
        # Define the ABI to build for (passed as parameter)
        ABI="$1"
        
        # Define custom FFmpeg configure options
        CUSTOM_OPTIONS="--disable-gnutls \
        --disable-libssh \
        --disable-libzmq \
        --disable-librtmp \
        --disable-librist \
        --disable-libsmbclient \
        --disable-opengl \
        --disable-sndio \
        --disable-libpulse \
        --disable-indev=lavfi \
        --disable-outdev=alsa \
        --disable-protocols \
        --disable-network"
        
        echo "Building FFmpeg-Kit for ABI: $ABI"
        echo "Custom disable options: $CUSTOM_OPTIONS"
        
        # Run the build with custom options
        ./android.sh \
          --arch="$ABI" \
          --full \
          --enable-gpl \
          --enable-version3 \
          $CUSTOM_OPTIONS
        
        EOF
        
        chmod +x custom_android_build.sh
        
    - name: Build FFmpeg-Kit for ${{ matrix.abi }}
      run: |
        cd ffmpeg-kit
        ./custom_android_build.sh "${{ matrix.abi }}"
        
    - name: Verify build output
      run: |
        cd ffmpeg-kit
        echo "Build completed for ${{ matrix.abi }}"
        echo "Checking prebuilt directory:"
        ls -la prebuilt/
        
        if [ -d "prebuilt/android-${{ matrix.abi }}" ]; then
          echo "Contents of prebuilt/android-${{ matrix.abi }}:"
          ls -la "prebuilt/android-${{ matrix.abi }}/"
        fi
        
        # Check for AAR files
        find . -name "*.aar" -type f | head -10
        
        # Check for SO files
        find . -name "*.so" -type f | head -10
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-kit-${{ matrix.abi }}
        path: |
          ffmpeg-kit/prebuilt/android-${{ matrix.abi }}/
          ffmpeg-kit/android/ffmpeg-kit-android-lib/build/outputs/aar/
        retention-days: 30
        
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.abi }}
        path: |
          ffmpeg-kit/build.log
          ffmpeg-kit/android/build/
        retention-days: 7

  # Job to combine all ABI builds into a single release
  combine-builds:
    runs-on: ubuntu-latest
    needs: build-ffmpeg-kit
    if: always() && (needs.build-ffmpeg-kit.result == 'success')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Combine all ABI builds
      run: |
        mkdir -p combined-build/
        
        # Copy all ABI builds to combined directory
        for abi in armeabi-v7a x86 x86_64; do
          if [ -d "artifacts/ffmpeg-kit-$abi" ]; then
            echo "Adding $abi to combined build"
            cp -r "artifacts/ffmpeg-kit-$abi"/* combined-build/ || true
          fi
        done
        
        echo "Combined build contents:"
        ls -la combined-build/
        
    - name: Upload combined build
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-kit-android-all-abis
        path: combined-build/
        retention-days: 90
        
    - name: Create release summary
      run: |
        echo "# FFmpeg-Kit Android Build Summary" > build-summary.md
        echo "" >> build-summary.md
        echo "## Build Configuration" >> build-summary.md
        echo "- **Target ABIs**: armeabi-v7a, x86, x86_64 (arm64-v8a excluded as requested)" >> build-summary.md
        echo "- **Disabled Libraries**: gnutls, libssh, libzmq, librtmp, librist, libsmbclient, opengl, sndio, libpulse" >> build-summary.md
        echo "- **Disabled Components**: indev=lavfi, outdev=alsa, protocols, network" >> build-summary.md
        echo "- **Enabled Options**: GPL, version3, full build with all other libraries" >> build-summary.md
        echo "" >> build-summary.md
        echo "## Artifacts" >> build-summary.md
        echo "- Individual ABI builds: ffmpeg-kit-{abi-name}" >> build-summary.md
        echo "- Combined build: ffmpeg-kit-android-all-abis" >> build-summary.md
        echo "" >> build-summary.md
        echo "Built on: $(date)" >> build-summary.md
        
    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: build-summary
        path: build-summary.md
